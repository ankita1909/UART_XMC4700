<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\uart_printf.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\uart_printf.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Jan 08 18:08:16 2021
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; serial_init &rArr; XMC_UART_CH_Init &rArr; XMC_USIC_CH_Enable &rArr; XMC_USIC_Enable &rArr; XMC_AssertHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[102]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BusFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">BusFault_Handler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[57]">CAN0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[58]">CAN0_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[59]">CAN0_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[5a]">CAN0_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[5b]">CAN0_4_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[5c]">CAN0_5_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[5d]">CAN0_6_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[5e]">CAN0_7_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[3b]">CCU40_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[3c]">CCU40_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[3d]">CCU40_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[3e]">CCU40_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[3f]">CCU41_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[40]">CCU41_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[41]">CCU41_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[42]">CCU41_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[43]">CCU42_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[44]">CCU42_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[45]">CCU42_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[46]">CCU42_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[47]">CCU43_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[48]">CCU43_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[49]">CCU43_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[4a]">CCU43_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[4b]">CCU80_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[4c]">CCU80_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[4d]">CCU80_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[4e]">CCU80_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[4f]">CCU81_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[50]">CCU81_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[51]">CCU81_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[52]">CCU81_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[39]">DAC0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[3a]">DAC0_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[31]">DSD0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[32]">DSD0_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[33]">DSD0_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[34]">DSD0_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[35]">DSD0_4_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[36]">DSD0_5_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[37]">DSD0_6_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[38]">DSD0_7_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[77]">ECAT0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[14]">ERU0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[15]">ERU0_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[16]">ERU0_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[17]">ERU0_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[18]">ERU1_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[19]">ERU1_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[1a]">ERU1_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[1b]">ERU1_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[76]">ETH0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[72]">FCE0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[73]">GPDMA0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[78]">GPDMA1_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[71]">LEDTS0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[1c]">PMU0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[53]">POSIF0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[54]">POSIF0_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[55]">POSIF1_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[56]">POSIF1_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[13]">SCU_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[74]">SDMMC0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[79]">SystemInit</a> from system_xmc4800.o(.text) referenced from startup_xmc4800.o(.text)
 <LI><a href="#[75]">USB0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[5f]">USIC0_0_IRQHandler</a> from serial.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[60]">USIC0_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[61]">USIC0_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[62]">USIC0_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[63]">USIC0_4_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[64]">USIC0_5_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[65]">USIC1_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[66]">USIC1_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[67]">USIC1_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[68]">USIC1_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[69]">USIC1_4_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[6a]">USIC1_5_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[6b]">USIC2_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[6c]">USIC2_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[6d]">USIC2_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[6e]">USIC2_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[6f]">USIC2_4_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[70]">USIC2_5_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[1d]">VADC0_C0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[1e]">VADC0_C0_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[1f]">VADC0_C0_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[20]">VADC0_C0_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[21]">VADC0_G0_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[22]">VADC0_G0_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[23]">VADC0_G0_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[24]">VADC0_G0_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[25]">VADC0_G1_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[26]">VADC0_G1_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[27]">VADC0_G1_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[28]">VADC0_G1_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[29]">VADC0_G2_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[2a]">VADC0_G2_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[2b]">VADC0_G2_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[2c]">VADC0_G2_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[2d]">VADC0_G3_0_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[2e]">VADC0_G3_1_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[2f]">VADC0_G3_2_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[30]">VADC0_G3_3_IRQHandler</a> from startup_xmc4800.o(.text) referenced from startup_xmc4800.o(RESET)
 <LI><a href="#[7d]">__main</a> from __main.o(!!!main) referenced from startup_xmc4800.o(.text)
 <LI><a href="#[7c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[7b]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[7e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[80]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[11e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[11f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[81]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[120]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[f2]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[82]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[84]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[121]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[91]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[86]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[88]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[122]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[123]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[124]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[125]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[126]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[127]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[128]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[129]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[12f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[130]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[131]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[132]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[133]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[134]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[135]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[96]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[136]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[8c]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[137]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[138]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[139]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[13a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[13b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[13c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[7f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[13d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[8e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[90]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[13e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[92]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; serial_init &rArr; XMC_UART_CH_Init &rArr; XMC_USIC_CH_Enable &rArr; XMC_USIC_Enable &rArr; XMC_AssertHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[13f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[10f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[95]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[140]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[97]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[99]"></a>XMC_AssertHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = XMC_AssertHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Disable
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_ConfigExternalInputSignalToBRG
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Enable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_Enable
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetHardwareControl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetExternalOutputClockDivider
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetWdtClockDivider
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetEbuClockDivider
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetUsbClockDivider
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetSystemClockDivider
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetCpuClockDivider
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetCcuClockDivider
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetPeripheralClockDivider
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_DisableOutOfRangeComparator
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_EnableOutOfRangeComparator
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetMode
</UL>

<P><STRONG><a name="[141]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[93]"></a>main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = main &rArr; serial_init &rArr; XMC_UART_CH_Init &rArr; XMC_USIC_CH_Enable &rArr; XMC_USIC_Enable &rArr; XMC_AssertHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9c]"></a>stdin_getchar</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, retarget_io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buffer_get
</UL>

<P><STRONG><a name="[9e]"></a>stdout_putchar</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, retarget_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[142]"></a>ring_buffer_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ring_buffer.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>ring_buffer_put</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ring_buffer.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>ring_buffer_get</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ring_buffer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdin_getchar
</UL>

<P><STRONG><a name="[a0]"></a>sum</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sum
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_0_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>serial_init</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = serial_init &rArr; XMC_UART_CH_Init &rArr; XMC_USIC_CH_Enable &rArr; XMC_USIC_Enable &rArr; XMC_AssertHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetInterruptNodePointer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_EnableEvent
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>USIC0_0_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USIC0_0_IRQHandler &rArr; sum
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_GetReceivedData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Transmit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>_sys_open</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, retarget_io_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[10e]"></a>_sys_close</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, retarget_io_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[a9]"></a>_sys_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, retarget_io_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[144]"></a>_sys_read</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, retarget_io_1.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>_sys_istty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[118]"></a>_sys_seek</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, retarget_io_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[107]"></a>_sys_flen</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[145]"></a>XMC_SCU_INTERRUPT_EnableEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>XMC_SCU_INTERRUPT_DisableEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>XMC_SCU_INTERRUPT_TriggerEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>XMC_SCU_INTERUPT_GetEventStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_IRQHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableLowPowerOscillator
</UL>

<P><STRONG><a name="[bd]"></a>XMC_SCU_INTERRUPT_ClearEventStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_IRQHandler
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableLowPowerOscillator
</UL>

<P><STRONG><a name="[148]"></a>XMC_SCU_GetBootMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>XMC_SCU_SetBootMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>XMC_SCU_ReadGPR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>XMC_SCU_WriteGPR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>XMC_SCU_EnableOutOfRangeComparator</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>

<P><STRONG><a name="[ad]"></a>XMC_SCU_DisableOutOfRangeComparator</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>

<P><STRONG><a name="[14c]"></a>XMC_SCU_CalibrateTemperatureSensor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>XMC_SCU_EnableTemperatureSensor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>XMC_SCU_DisableTemperatureSensor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>XMC_SCU_IsTemperatureSensorEnabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_GetTemperatureMeasurement
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_StartTemperatureMeasurement
</UL>

<P><STRONG><a name="[14f]"></a>XMC_SCU_IsTemperatureSensorReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>XMC_SCU_IsTemperatureSensorBusy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_StartTemperatureMeasurement
</UL>

<P><STRONG><a name="[ae]"></a>XMC_SCU_StartTemperatureMeasurement</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_IsTemperatureSensorBusy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_IsTemperatureSensorEnabled
</UL>

<P><STRONG><a name="[b1]"></a>XMC_SCU_GetTemperatureMeasurement</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_IsTemperatureSensorEnabled
</UL>

<P><STRONG><a name="[150]"></a>XMC_SCU_WriteToRetentionMemory</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>XMC_SCU_ReadFromRetentionMemory</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>XMC_SCU_CLOCK_SetSystemClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[b2]"></a>XMC_SCU_CLOCK_StepSystemPllFrequency</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_lDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartSystemPll
</UL>

<P><STRONG><a name="[b4]"></a>XMC_SCU_CLOCK_SetSystemPllClockSource</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartSystemPll
</UL>

<P><STRONG><a name="[b3]"></a>XMC_SCU_CLOCK_StartSystemPll</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetSystemPllClockSource
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StepSystemPllFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[c6]"></a>XMC_SCU_CLOCK_EnableSystemPll</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[c5]"></a>XMC_SCU_CLOCK_DisableSystemPll</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[c4]"></a>XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[b6]"></a>XMC_SCU_CLOCK_EnableHighPerformanceOscillator</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[b7]"></a>XMC_SCU_CLOCK_SetPeripheralClockDivider</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[b8]"></a>XMC_SCU_CLOCK_SetCcuClockDivider</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[b9]"></a>XMC_SCU_CLOCK_SetCpuClockDivider</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[ba]"></a>XMC_SCU_CLOCK_SetSystemClockDivider</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[bb]"></a>XMC_SCU_CLOCK_SetBackupClockCalibrationMode</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_lDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[c3]"></a>XMC_SCU_HIB_SetStandbyClockSource</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[c2]"></a>XMC_SCU_CLOCK_IsLowPowerOscillatorStable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[bc]"></a>XMC_SCU_CLOCK_EnableLowPowerOscillator</STRONG> (Thumb, 112 bytes, Stack size 4 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_INTERRUPT_ClearEventStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_INTERUPT_GetEventStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[c1]"></a>XMC_SCU_HIB_EnableHibernateDomain</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
</UL>

<P><STRONG><a name="[bf]"></a>XMC_SCU_CLOCK_Init</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_EnableHibernateDomain
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableLowPowerOscillator
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_IsLowPowerOscillatorStable
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_SetStandbyClockSource
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetBackupClockCalibrationMode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetSystemClockDivider
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetCpuClockDivider
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetCcuClockDivider
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetPeripheralClockDivider
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableHighPerformanceOscillator
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_DisableSystemPll
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableSystemPll
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartSystemPll
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetSystemClockSource
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>

<P><STRONG><a name="[152]"></a>XMC_SCU_TRAP_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>XMC_SCU_TRAP_Disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>XMC_SCU_TRAP_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>XMC_SCU_TRAP_Trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>XMC_SCU_TRAP_ClearStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>XMC_SCU_PARITY_ClearStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>XMC_SCU_PARITY_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>XMC_SCU_PARITY_Enable</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>XMC_SCU_PARITY_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>XMC_SCU_PARITY_EnableTrapGeneration</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>XMC_SCU_PARITY_DisableTrapGeneration</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>XMC_SCU_INTERRUPT_EnableNmiRequest</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>XMC_SCU_INTERRUPT_DisableNmiRequest</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>XMC_SCU_RESET_AssertPeripheralReset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Disable
</UL>

<P><STRONG><a name="[e3]"></a>XMC_SCU_RESET_DeassertPeripheralReset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_RESET_DeassertPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Enable
</UL>

<P><STRONG><a name="[e4]"></a>XMC_SCU_RESET_IsPeripheralResetAsserted</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_RESET_IsPeripheralResetAsserted
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Enable
</UL>

<P><STRONG><a name="[c7]"></a>XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockFrequency
</UL>

<P><STRONG><a name="[c8]"></a>XMC_SCU_CLOCK_GetSystemPllClockFrequency</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetExternalOutputClockFrequency
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetWdtClockFrequency
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetECATClockFrequency
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetEbuClockFrequency
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetUsbClockFrequency
</UL>

<P><STRONG><a name="[c9]"></a>XMC_SCU_CLOCK_GetUsbPllClockFrequency</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetExternalOutputClockFrequency
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetECATClockFrequency
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetUsbClockFrequency
</UL>

<P><STRONG><a name="[ca]"></a>XMC_SCU_CLOCK_GetCcuClockFrequency</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemClockFrequency
</UL>

<P><STRONG><a name="[cc]"></a>XMC_SCU_CLOCK_GetUsbClockFrequency</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetUsbPllClockFrequency
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockFrequency
</UL>

<P><STRONG><a name="[cd]"></a>XMC_SCU_CLOCK_GetEbuClockFrequency</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockFrequency
</UL>

<P><STRONG><a name="[ce]"></a>XMC_SCU_CLOCK_GetECATClockFrequency</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetUsbPllClockFrequency
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockFrequency
</UL>

<P><STRONG><a name="[cf]"></a>XMC_SCU_CLOCK_GetWdtClockFrequency</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockFrequency
</UL>

<P><STRONG><a name="[d0]"></a>XMC_SCU_CLOCK_GetExternalOutputClockFrequency</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetUsbPllClockFrequency
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockFrequency
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemClockFrequency
</UL>

<P><STRONG><a name="[de]"></a>XMC_SCU_CLOCK_GetPeripheralClockFrequency</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xmc4_scu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetMCLKFrequency
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetSCLKFrequency
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_GetBaudrate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrateEx
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_SetBaudrateEx
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_SetBaudrate
</UL>

<P><STRONG><a name="[15f]"></a>XMC_SCU_CLOCK_SetUsbClockSource</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>XMC_SCU_CLOCK_SetWdtClockSource</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>XMC_SCU_CLOCK_SetExternalOutputClockSource</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>XMC_SCU_HIB_SetRtcClockSource</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>XMC_SCU_CLOCK_SetUsbClockDivider</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>

<P><STRONG><a name="[d2]"></a>XMC_SCU_CLOCK_SetEbuClockDivider</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>

<P><STRONG><a name="[d3]"></a>XMC_SCU_CLOCK_SetWdtClockDivider</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>

<P><STRONG><a name="[d4]"></a>XMC_SCU_CLOCK_SetExternalOutputClockDivider</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>

<P><STRONG><a name="[163]"></a>XMC_SCU_CLOCK_SetECATClockDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>XMC_SCU_CLOCK_EnableClock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>XMC_SCU_CLOCK_DisableClock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>XMC_SCU_CLOCK_IsClockEnabled</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>XMC_SCU_CLOCK_GatePeripheralClock</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Disable
</UL>

<P><STRONG><a name="[e1]"></a>XMC_SCU_CLOCK_UngatePeripheralClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_CLOCK_UngatePeripheralClock
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Enable
</UL>

<P><STRONG><a name="[e2]"></a>XMC_SCU_CLOCK_IsPeripheralClockGated</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xmc4_scu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_SCU_CLOCK_IsPeripheralClockGated
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Enable
</UL>

<P><STRONG><a name="[167]"></a>XMC_SCU_POWER_GetEVR13Voltage</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>XMC_SCU_POWER_GetEVR33Voltage</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>XMC_SCU_CLOCK_EnableUsbPll</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>XMC_SCU_CLOCK_DisableUsbPll</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>XMC_SCU_CLOCK_StartUsbPll</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>XMC_SCU_CLOCK_StopUsbPll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>XMC_SCU_POWER_EnableUsb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>XMC_SCU_POWER_DisableUsb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>XMC_SCU_CLOCK_IsUsbPllLocked</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>XMC_SCU_HIB_DisableHibernateDomain</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>XMC_SCU_HIB_IsHibernateDomainEnabled</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>XMC_SCU_HIB_EnableInternalSlowClock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>XMC_SCU_HIB_DisableInternalSlowClock</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>XMC_SCU_HIB_ClearEventStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>XMC_SCU_HIB_TriggerEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>XMC_SCU_HIB_EnableEvent</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>XMC_SCU_HIB_DisableEvent</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>XMC_SCU_HIB_EnterHibernateState</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_EnterHibernateStateEx
</UL>

<P><STRONG><a name="[d5]"></a>XMC_SCU_HIB_EnterHibernateStateEx</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_HIB_EnterHibernateState
</UL>

<P><STRONG><a name="[178]"></a>XMC_SCU_HIB_SetWakeupTriggerInput</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>XMC_SCU_HIB_SetPinMode</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>XMC_SCU_HIB_SetPinOutputLevel</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>XMC_SCU_HIB_SetInput0</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>XMC_SCU_HIB_SetSR0Input</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>XMC_SCU_CLOCK_DisableLowPowerOscillator</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>XMC_SCU_CLOCK_DisableHighPerformanceOscillator</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>XMC_SCU_CLOCK_StopSystemPll</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>XMC_SCU_CLOCK_IsSystemPllLocked</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>XMC_SCU_INTERRUPT_SetEventHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, xmc4_scu.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>XMC_SCU_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_INTERRUPT_ClearEventStatus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_INTERUPT_GetEventStatus
</UL>

<P><STRONG><a name="[a2]"></a>XMC_GPIO_SetMode</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, xmc_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = XMC_GPIO_SetMode &rArr; XMC_AssertHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_IsModeValid
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[d9]"></a>XMC_GPIO_SetHardwareControl</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, xmc_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>

<P><STRONG><a name="[a1]"></a>XMC_UART_CH_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, xmc_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = XMC_UART_CH_Init &rArr; XMC_USIC_CH_Enable &rArr; XMC_USIC_Enable &rArr; XMC_AssertHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrateEx
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[dd]"></a>XMC_UART_CH_SetBaudrate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, xmc_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetPeripheralClockFrequency
</UL>

<P><STRONG><a name="[df]"></a>XMC_UART_CH_SetBaudrateEx</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, xmc_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrateEx
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_SetBaudrate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetPeripheralClockFrequency
</UL>

<P><STRONG><a name="[9f]"></a>XMC_UART_CH_Transmit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, xmc_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_0_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[a5]"></a>XMC_UART_CH_GetReceivedData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, xmc_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_0_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>XMC_UART_CH_Stop</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, xmc_uart.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>XMC_UART_CH_EnableEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[189]"></a>XMC_UART_CH_DisableEvent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, xmc_uart.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>XMC_USIC_Enable</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, xmc_usic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = XMC_USIC_Enable &rArr; XMC_AssertHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_IsPeripheralClockGated
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_UngatePeripheralClock
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_IsPeripheralResetAsserted
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_DeassertPeripheralReset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_CH_Enable
</UL>

<P><STRONG><a name="[da]"></a>XMC_USIC_CH_Enable</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, xmc_usic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = XMC_USIC_CH_Enable &rArr; XMC_USIC_Enable &rArr; XMC_AssertHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_USIC_Enable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
</UL>

<P><STRONG><a name="[18a]"></a>XMC_USIC_CH_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xmc_usic.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>XMC_USIC_CH_SetBaudrate</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, xmc_usic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XMC_USIC_CH_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetPeripheralClockFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_SetBaudrateEx
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_SetBaudrate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
</UL>

<P><STRONG><a name="[db]"></a>XMC_USIC_CH_SetBaudrateEx</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, xmc_usic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XMC_USIC_CH_SetBaudrateEx
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetPeripheralClockFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_SetBaudrateEx
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_UART_CH_Init
</UL>

<P><STRONG><a name="[e5]"></a>XMC_USIC_CH_GetBaudrate</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, xmc_usic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetPeripheralClockFrequency
</UL>

<P><STRONG><a name="[e6]"></a>XMC_USIC_CH_GetSCLKFrequency</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, xmc_usic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetPeripheralClockFrequency
</UL>

<P><STRONG><a name="[e7]"></a>XMC_USIC_CH_GetMCLKFrequency</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, xmc_usic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetPeripheralClockFrequency
</UL>

<P><STRONG><a name="[e8]"></a>XMC_USIC_CH_ConfigExternalInputSignalToBRG</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, xmc_usic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>

<P><STRONG><a name="[18b]"></a>XMC_USIC_CH_TXFIFO_Configure</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xmc_usic.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>XMC_USIC_CH_RXFIFO_Configure</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, xmc_usic.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc_usic.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, xmc_usic.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>XMC_USIC_CH_SetInterruptNodePointer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xmc_usic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XMC_USIC_CH_SetInterruptNodePointer
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[18f]"></a>XMC_USIC_CH_TXFIFO_SetInterruptNodePointer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, xmc_usic.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>XMC_USIC_CH_RXFIFO_SetInterruptNodePointer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, xmc_usic.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>XMC_USIC_Disable</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, xmc_usic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GatePeripheralClock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_RESET_AssertPeripheralReset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN0_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>CCU40_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>CCU40_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CCU40_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CCU40_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CCU41_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CCU41_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CCU41_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CCU41_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CCU42_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CCU42_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CCU42_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>CCU42_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CCU43_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CCU43_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CCU43_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CCU43_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CCU80_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CCU80_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CCU80_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CCU80_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CCU81_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CCU81_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CCU81_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CCU81_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DAC0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DAC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DSD0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DSD0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DSD0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DSD0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DSD0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DSD0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DSD0_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DSD0_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>ECAT0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ERU0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ERU0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ERU0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ERU0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ERU1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ERU1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ERU1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ERU1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>ETH0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>FCE0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPDMA0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>GPDMA1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>LEDTS0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PMU0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>POSIF0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>POSIF0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>POSIF1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>POSIF1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SCU_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SDMMC0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>USB0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>USIC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USIC0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USIC0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>USIC0_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>USIC0_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USIC1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>USIC1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USIC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>USIC1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USIC1_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>USIC1_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>USIC2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>USIC2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>USIC2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>USIC2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>USIC2_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>USIC2_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>VADC0_C0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>VADC0_C0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>VADC0_C0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>VADC0_C0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>VADC0_G0_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>VADC0_G0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>VADC0_G0_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>VADC0_G0_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>VADC0_G1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>VADC0_G1_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>VADC0_G1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>VADC0_G1_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>VADC0_G2_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>VADC0_G2_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>VADC0_G2_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>VADC0_G2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>VADC0_G3_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>VADC0_G3_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>VADC0_G3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>VADC0_G3_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_xmc4800.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_xmc4800.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b5]"></a>OSCHP_GetFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system_xmc4800.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetUsbPllClockFrequency
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_EnableHighPerformanceOscillator
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StartSystemPll
</UL>

<P><STRONG><a name="[ab]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, system_xmc4800.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_lDelay
</UL>

<P><STRONG><a name="[ec]"></a>SystemCoreClockSetup</STRONG> (Thumb, 710 bytes, Stack size 8 bytes, system_xmc4800.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockSetup &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCHP_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ef]"></a>SystemCoreSetup</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system_xmc4800.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[79]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system_xmc4800.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SystemCoreClockSetup &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreSetup
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_xmc4800.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_AssertHandler
</UL>

<P><STRONG><a name="[f1]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[f7]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[83]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[a6]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USIC0_0_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f4]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[191]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[192]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[f6]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[f8]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[85]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[f0]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[fa]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[8b]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[8d]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[8f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[100]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[104]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[11d]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[196]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[fc]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[10c]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[ff]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[197]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[fd]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[198]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[19c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[19d]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[114]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[89]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[109]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[10b]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[19f]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[10a]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[10d]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[105]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[111]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[110]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[98]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[116]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[117]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1a0]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[115]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[11b]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1a1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[1a3]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[7b]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1a6]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1a7]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[aa]"></a>XMC_SCU_lDelay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_SetBackupClockCalibrationMode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_StepSystemPllFrequency
</UL>

<P><STRONG><a name="[cb]"></a>XMC_SCU_CLOCK_GetSystemClockFrequency</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xmc4_scu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetExternalOutputClockFrequency
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_SCU_CLOCK_GetCcuClockFrequency
</UL>

<P><STRONG><a name="[d8]"></a>XMC_GPIO_IsModeValid</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, xmc_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XMC_GPIO_SetMode
</UL>

<P><STRONG><a name="[ed]"></a>delay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_xmc4800.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockSetup
</UL>

<P><STRONG><a name="[7c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
